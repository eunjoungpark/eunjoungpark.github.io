{"version":3,"sources":["components/form/checkbox/Checkbox.js","container/myPage/Wish.js"],"names":["CheckBox","styled","fieldset","propTypes","id","PropTypes","string","label","legend","checked","bool","className","onClick","func","React","memo","type","name","defaultChecked","htmlFor","WishWrap","div","EmptyBox","mapDispatchToProps","updateWishList","checkedWish","removeWish","addOrderList","emptyLoading","connect","wish","auth","store","loadings","loadingWish","WISH_LIST","loadingRemoveWish","REMOVE_WISH","loadingAddOrder","ADD_ORDER_LIST","selected","history","useState","total","setTotal","count","setCount","allCheck","setAllCheck","modalMsg","setModalMsg","alertModal","setAlertModal","removeModal","setRemoveModal","useEffect","localId","push","s","c","_map","_filter","_appendKey","w","Object","keys","every","token","idToken","userId","key","onClickCheckHandler","useCallback","produce","draft","forEach","onCheckHandler","onRemoveHandler","onAddOrderHandler","e","preventDefault","firstMenu","order","contents","nickname","ko","date","Date","getTime","onClickAlertHandler","memberWish","onSubmit","map","style","background","types","size","cups","cup","commas","price","shot","extra","syrup","mocha","hazelnut","caramel","vanilla","messages","i","indexOf","Button","kind","address","to","Loading","Modal","shown","onClickHandler"],"mappings":"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","file":"static/js/12.1be508fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst CheckBox = styled.fieldset`\r\n  position: relative;\r\n  input {\r\n    position: absolute;\r\n    z-index: -1;\r\n  }\r\n  label {\r\n    padding-left: 25px;\r\n    &:before {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 14px;\r\n      height: 14px;\r\n      z-index: 1;\r\n      border: 2px solid #d9b391;\r\n    }\r\n    &.checked:after {\r\n      position: absolute;\r\n      top: 3px;\r\n      left: 3px;\r\n      content: '';\r\n      width: 9px;\r\n      height: 6px;\r\n      transform: rotate(-47deg);\r\n      border-left: 3px solid #8c6046;\r\n      border-bottom: 3px solid #8c6046;\r\n      z-index: 2;\r\n    }\r\n  }\r\n`;\r\nconst Checkbox = ({ id, label, checked, legend, className, onClick }) => {\r\n  return (\r\n    <CheckBox className={className}>\r\n      <legend className=\"hidden\">{legend}</legend>\r\n      <input\r\n        type=\"checkbox\"\r\n        id={id}\r\n        name={id}\r\n        defaultChecked={checked}\r\n        onClick={onClick}\r\n      />\r\n      <label htmlFor={id} className={checked ? 'checked' : ''}>\r\n        {label}\r\n      </label>\r\n    </CheckBox>\r\n  );\r\n};\r\n\r\nCheckBox.propTypes = {\r\n  id: PropTypes.string,\r\n  label: PropTypes.string,\r\n  legend: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\nexport default React.memo(Checkbox);\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport produce from 'immer';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Contents, PageTitle, FlextCont } from '../../components/common';\r\nimport Checkbox from '../../components/form/checkbox/Checkbox';\r\nimport Loading from '../../components/loading/Loading';\r\nimport Button from '../../components/form/button/Button';\r\nimport Modal from '../../components/modal/Modal';\r\nimport { MdClose } from 'react-icons/md';\r\nimport { commas, _filter, _map, _appendKey } from '../../libs/util';\r\nimport { types, cups } from '../../store/options';\r\nimport {\r\n  updateWishList,\r\n  checkedWish,\r\n  removeWish,\r\n  WISH_LIST,\r\n  REMOVE_WISH,\r\n} from '../../store/wish';\r\nimport { addOrderList, ADD_ORDER_LIST } from '../../store/order';\r\nimport { emptyLoading } from '../../store/loadings';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst WishWrap = styled.div`\r\n  padding-bottom: 220px;\r\n  .allChk {\r\n    width: 100%;\r\n    padding-bottom: 10px;\r\n    border-bottom: 1px solid #260f07;\r\n  }\r\n  .payBox {\r\n    position: fixed;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 20px;\r\n    background-color: #260f07;\r\n    z-index: 5;\r\n    .inn {\r\n      padding: 20px 10px;\r\n      background-color: #fff;\r\n      border-radius: 5px;\r\n      .sumBox {\r\n        margin-bottom: 20px;\r\n        padding: 0 10px 10px;\r\n        border-bottom: 1px solid #260f07;\r\n        font-size: 18px;\r\n        .sum {\r\n          color: #8c6046;\r\n          float: right;\r\n        }\r\n      }\r\n      .store {\r\n        text-align: center;\r\n        line-height: 1.5;\r\n        font-size: 14px;\r\n        a {\r\n          display: inline-block;\r\n          padding: 3px 5px;\r\n          margin: -5px 0 0 10px;\r\n          font-size: 14px;\r\n          vertical-align: middle;\r\n          border-radius: 3px;\r\n          background-color: #d9b391;\r\n          line-height: 1;\r\n        }\r\n      }\r\n      button {\r\n        margin-top: 20px;\r\n      }\r\n    }\r\n  }\r\n  .list {\r\n    > li {\r\n      position: relative;\r\n      padding: 15px;\r\n      &:nth-child(even) {\r\n        background-color: #ededed;\r\n      }\r\n      fieldset {\r\n        margin-bottom: 10px;\r\n      }\r\n      .options {\r\n        padding-left: 25px;\r\n        li {\r\n          margin: 10px 0;\r\n          font-size: 14px;\r\n          color: #8c6046;\r\n          .option {\r\n            float: left;\r\n          }\r\n          .extra {\r\n            float: right;\r\n          }\r\n        }\r\n      }\r\n      .total {\r\n        margin-top: 20px;\r\n        text-align: right;\r\n        color: #260f07;\r\n      }\r\n      .removeBtn {\r\n        position: absolute;\r\n        top: 10px;\r\n        right: 10px;\r\n        color: #260f07;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EmptyBox = styled.div`\r\n  padding: 40px;\r\n  color: #666;\r\n  text-align: center;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst Wish = ({\r\n  wish,\r\n  auth,\r\n  selected,\r\n  loadingWish,\r\n  addOrderList,\r\n  updateWishList,\r\n  checkedWish,\r\n  removeWish,\r\n  loadingRemoveWish,\r\n  loadingAddOrder,\r\n  emptyLoading,\r\n  history,\r\n}) => {\r\n  const [total, setTotal] = useState(0); //주문음료 합계\r\n  const [count, setCount] = useState(0); //주문음료 수\r\n  const [allCheck, setAllCheck] = useState(true); //주문전체 선택\r\n  const [modalMsg, setModalMsg] = useState(''); //알림 메시지\r\n  const [alertModal, setAlertModal] = useState(true); //알림 노출여부\r\n  const [removeModal, setRemoveModal] = useState(false); //삭제 알림 노출여부\r\n\r\n  //계정없을 경우 메인이동\r\n  useEffect(() => {\r\n    if (auth.localId === null) {\r\n      history.push('/');\r\n    }\r\n  }, [auth.localId, history]);\r\n\r\n  useEffect(() => {\r\n    let s = 0, //음료합계\r\n      c = 0; //음료수\r\n    if (wish) {\r\n      _map(_filter(_appendKey(wish), w => w.checked === true), w => {\r\n        s += w.total;\r\n        c += 1;\r\n      });\r\n\r\n      //일일항목 전체선택 여부\r\n      setAllCheck(Object.keys(wish).every(w => wish[w].checked === true));\r\n    }\r\n    setTotal(s);\r\n    setCount(c);\r\n  }, [wish]);\r\n\r\n  useEffect(() => {\r\n    if (loadingAddOrder === false) {\r\n      setAlertModal(false);\r\n      setRemoveModal(false);\r\n      setModalMsg('주문 완료했습니다.');\r\n\r\n      //주문완료된 상품 삭제\r\n      if (wish) {\r\n        _map(_filter(_appendKey(wish), w => w.checked === true), w => {\r\n          removeWish({\r\n            token: auth.idToken,\r\n            userId: auth.localId,\r\n            id: w.key,\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }, [wish, loadingAddOrder, removeWish, auth.idToken, auth.localId]);\r\n\r\n  useEffect(() => {\r\n    if (removeModal && loadingRemoveWish === false) {\r\n      setAlertModal(false);\r\n      setModalMsg('삭제되었습니다.');\r\n    }\r\n  }, [loadingRemoveWish, removeModal]);\r\n\r\n  //로딩상태 언마운트시 비움처리\r\n  useEffect(() => {\r\n    return () => {\r\n      emptyLoading(WISH_LIST);\r\n      emptyLoading(REMOVE_WISH);\r\n      emptyLoading(ADD_ORDER_LIST);\r\n    };\r\n  }, [emptyLoading]);\r\n\r\n  //전체 선택 토글\r\n  const onClickCheckHandler = useCallback(() => {\r\n    updateWishList({\r\n      token: auth.idToken,\r\n      userId: auth.localId,\r\n      wish: produce(wish, draft => {\r\n        Object.keys(draft).forEach(w => {\r\n          draft[w].checked = !allCheck;\r\n        });\r\n      }),\r\n    });\r\n    setAllCheck(!allCheck);\r\n  }, [wish, auth.idToken, auth.localId, allCheck, updateWishList]);\r\n\r\n  //결제할 항목 토글\r\n  const onCheckHandler = useCallback(\r\n    (id, checked) => {\r\n      checkedWish({\r\n        token: auth.idToken,\r\n        userId: auth.localId,\r\n        id,\r\n        wish: produce(wish[id], draft => {\r\n          draft.checked = !checked;\r\n        }),\r\n      });\r\n    },\r\n    [wish, auth.idToken, auth.localId, checkedWish],\r\n  );\r\n\r\n  //항목삭제\r\n  const onRemoveHandler = useCallback(\r\n    id => {\r\n      removeWish({\r\n        token: auth.idToken,\r\n        userId: auth.localId,\r\n        id,\r\n      });\r\n      setRemoveModal(true);\r\n    },\r\n    [auth.idToken, auth.localId, removeWish],\r\n  );\r\n\r\n  //주문 추가\r\n  const onAddOrderHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!selected) {\r\n        setAlertModal(false);\r\n        setModalMsg('주문하실 매장을 선택해주세요.');\r\n      } else {\r\n        if (wish) {\r\n          const firstMenu = wish[Object.keys(wish)[0]];\r\n          addOrderList({\r\n            token: auth.idToken,\r\n            userId: auth.localId,\r\n            order: {\r\n              contents:\r\n                (firstMenu.nickname !== ''\r\n                  ? firstMenu.nickname\r\n                  : firstMenu.ko) + (count > 1 ? ` 외 ${count - 1}잔` : ' 1잔'),\r\n              total: total,\r\n              store: selected,\r\n              date: new Date().getTime(),\r\n            },\r\n          });\r\n        }\r\n      }\r\n    },\r\n    [wish, auth.idToken, auth.localId, selected, total, count, addOrderList],\r\n  );\r\n\r\n  //기타모달 닫기\r\n  const onClickAlertHandler = useCallback(() => {\r\n    setModalMsg('');\r\n    setAlertModal(!alertModal);\r\n  }, [alertModal]);\r\n\r\n  let memberWish = <EmptyBox>주문하실 음료가 없습니다.</EmptyBox>;\r\n  if (wish) {\r\n    memberWish = (\r\n      <form onSubmit={onAddOrderHandler}>\r\n        <Checkbox\r\n          id=\"allCheck\"\r\n          label=\"전체음료\"\r\n          legend=\"위시리스트에 모든음료 주문선택\"\r\n          onClick={onClickCheckHandler}\r\n          checked={allCheck}\r\n          className=\"allChk\"\r\n        />\r\n        <ol className=\"list\">\r\n          {Object.keys(wish).map(w => {\r\n            return (\r\n              <li key={w}>\r\n                <Checkbox\r\n                  id={w}\r\n                  label={\r\n                    wish[w].nickname !== '' ? wish[w].nickname : wish[w].ko\r\n                  }\r\n                  legend={`${wish[w].ko} 선택하기`}\r\n                  checked={wish[w].checked}\r\n                  style={{ background: wish[w].checked ? 'red' : '' }}\r\n                  onClick={() => onCheckHandler(w, wish[w].checked)}\r\n                />\r\n                <ul className=\"options\">\r\n                  <li className=\"clear\">\r\n                    <span className=\"option\">\r\n                      {types[wish[w].type]}/{wish[w].size}/{cups[wish[w].cup]}\r\n                    </span>\r\n                    <span className=\"extra\">{commas(wish[w].price)}원</span>\r\n                  </li>\r\n                  {wish[w].shot.count > 0 && (\r\n                    <li className=\"clear\">\r\n                      <span className=\"option\">에스프레소</span>\r\n                      <span className=\"extra\">\r\n                        {commas(wish[w].shot.count * wish[w].shot.extra)}원\r\n                      </span>\r\n                    </li>\r\n                  )}\r\n                  {wish[w].syrup.mocha.count > 0 && (\r\n                    <li className=\"clear\">\r\n                      <span className=\"option\">모카 시럽</span>\r\n                      <span className=\"extra\">\r\n                        {commas(\r\n                          wish[w].syrup.mocha.count * wish[w].syrup.mocha.extra,\r\n                        )}\r\n                        원\r\n                      </span>\r\n                    </li>\r\n                  )}\r\n                  {wish[w].syrup.hazelnut.count > 0 && (\r\n                    <li className=\"clear\">\r\n                      <span className=\"option\">헤이즐넛 시럽</span>\r\n                      <span className=\"extra\">\r\n                        {commas(\r\n                          wish[w].syrup.hazelnut.count *\r\n                            wish[w].syrup.hazelnut.extra,\r\n                        )}\r\n                        원\r\n                      </span>\r\n                    </li>\r\n                  )}\r\n                  {wish[w].syrup.caramel.count > 0 && (\r\n                    <li className=\"clear\">\r\n                      <span className=\"option\">카라멜 시럽</span>\r\n                      <span className=\"extra\">\r\n                        {commas(\r\n                          wish[w].syrup.caramel.count *\r\n                            wish[w].syrup.caramel.extra,\r\n                        )}\r\n                        원\r\n                      </span>\r\n                    </li>\r\n                  )}\r\n                  {wish[w].syrup.vanilla.count > 0 && (\r\n                    <li className=\"clear\">\r\n                      <span className=\"option\">바닐라 시럽</span>\r\n                      <span className=\"extra\">\r\n                        {commas(\r\n                          wish[w].syrup.vanilla.count *\r\n                            wish[w].syrup.vanilla.extra,\r\n                        )}\r\n                        원\r\n                      </span>\r\n                    </li>\r\n                  )}\r\n                  {Object.keys(wish[w].messages).map(\r\n                    i =>\r\n                      wish[w].messages[i] !== '' &&\r\n                      'cup shot size mocha hazelnut caramel vanilla'.indexOf(\r\n                        i,\r\n                      ) < 0 && (\r\n                        <li key={i} className=\"clear\">\r\n                          <span className=\"option\">{wish[w].messages[i]}</span>\r\n                          <span className=\"extra\">0원</span>\r\n                        </li>\r\n                      ),\r\n                  )}\r\n                </ul>\r\n                <p className=\"total\">{commas(wish[w].total)}원</p>\r\n                <Button\r\n                  kind=\"blank\"\r\n                  className=\"removeBtn\"\r\n                  onClick={() => onRemoveHandler(w)}\r\n                >\r\n                  <MdClose />\r\n                </Button>\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n        <div className=\"payBox\">\r\n          <div className=\"inn\">\r\n            <p className=\"sumBox\">\r\n              총 {count}개<span className=\"sum\">{commas(total)}원</span>\r\n            </p>\r\n            <p className=\"store\">\r\n              {selected ? (\r\n                <>\r\n                  <strong>[{selected.name}]</strong> {selected.address}\r\n                </>\r\n              ) : (\r\n                '주문할 매장을 선택해 주세요.'\r\n              )}\r\n              <Link to=\"/store\">설정</Link>\r\n            </p>\r\n            <FlextCont>\r\n              <Button kind=\"base\" type=\"submit\">\r\n                주문하기\r\n              </Button>\r\n            </FlextCont>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Contents>\r\n      <PageTitle>위시 리스트</PageTitle>\r\n      <WishWrap>\r\n        {/* 모든 통신시 로딩바 노출 */}\r\n        {(loadingWish || loadingRemoveWish || loadingAddOrder) && <Loading />}\r\n        {memberWish}\r\n        {/* 기타 알럿노출 */}\r\n        <Modal shown={alertModal} onClickHandler={onClickAlertHandler}>\r\n          {modalMsg}\r\n          <br />\r\n          <Button kind=\"default\" onClick={onClickAlertHandler}>\r\n            확인\r\n          </Button>\r\n        </Modal>\r\n      </WishWrap>\r\n    </Contents>\r\n  );\r\n};\r\n\r\nWish.propTypes = {\r\n  wish: PropTypes.object,\r\n  auth: PropTypes.object.isRequired,\r\n  selected: PropTypes.object,\r\n  addOrderList: PropTypes.func.isRequired,\r\n  updateWishList: PropTypes.func.isRequired,\r\n  checkedWish: PropTypes.func.isRequired,\r\n  removeWish: PropTypes.func.isRequired,\r\n  emptyLoading: PropTypes.func.isRequired,\r\n  loadingWish: PropTypes.bool,\r\n  loadingRemoveWish: PropTypes.bool,\r\n  loadingAddOrder: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = ({ wish, auth, store, loadings }) => ({\r\n  wish,\r\n  auth,\r\n  loadingWish: loadings[WISH_LIST],\r\n  loadingRemoveWish: loadings[REMOVE_WISH],\r\n  loadingAddOrder: loadings[ADD_ORDER_LIST],\r\n  selected: store.selected,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateWishList,\r\n  checkedWish,\r\n  removeWish,\r\n  addOrderList,\r\n  emptyLoading,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Wish);\r\n"],"sourceRoot":""}