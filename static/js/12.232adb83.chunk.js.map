{"version":3,"sources":["components/form/checkbox/Checkbox.js","container/myPage/Wish.js"],"names":["CheckBox","styled","fieldset","propTypes","id","PropTypes","string","label","legend","checked","bool","className","onClick","func","React","memo","type","name","defaultChecked","htmlFor","WishWrap","div","EmptyBox","mapDispatchToProps","updateWishList","checkedWish","removeWish","addOrderList","emptyLoading","connect","wish","auth","store","loadings","loadingWish","WISH_LIST","loadingRemoveWish","REMOVE_WISH","loadingAddOrder","ADD_ORDER_LIST","selected","useState","total","setTotal","count","setCount","allCheck","setAllCheck","modalMsg","setModalMsg","alertModal","setAlertModal","removeModal","setRemoveModal","useEffect","s","c","Object","keys","forEach","w","every","e","token","idToken","userId","localId","onClickCheckHandler","useCallback","produce","draft","onCheckHandler","onRemoveHandler","onAddOrderHandler","preventDefault","firstMenu","order","contents","nickname","ko","date","Date","getTime","onClickAlertHandler","onSubmit","Loading","Modal","shown","onClickHandler","Button","kind","map","key","style","background","types","size","cups","cup","commas","price","shot","extra","syrup","mocha","hazelnut","caramel","vanilla","messages","i","indexOf","address","to"],"mappings":"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","file":"static/js/12.232adb83.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nconst CheckBox = styled.fieldset`\r\n  position: relative;\r\n  input {\r\n    position: absolute;\r\n    z-index: -1;\r\n  }\r\n  label {\r\n    padding-left: 25px;\r\n    &:before {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 14px;\r\n      height: 14px;\r\n      z-index: 1;\r\n      border: 2px solid #d9b391;\r\n    }\r\n    &.checked:after {\r\n      position: absolute;\r\n      top: 3px;\r\n      left: 3px;\r\n      content: '';\r\n      width: 9px;\r\n      height: 6px;\r\n      transform: rotate(-47deg);\r\n      border-left: 3px solid #8c6046;\r\n      border-bottom: 3px solid #8c6046;\r\n      z-index: 2;\r\n    }\r\n  }\r\n`;\r\nconst Checkbox = ({ id, label, checked, legend, className, onClick }) => {\r\n  return (\r\n    <CheckBox className={className}>\r\n      <legend className=\"hidden\">{legend}</legend>\r\n      <input\r\n        type=\"checkbox\"\r\n        id={id}\r\n        name={id}\r\n        defaultChecked={checked}\r\n        onClick={onClick}\r\n      />\r\n      <label htmlFor={id} className={checked ? 'checked' : ''}>\r\n        {label}\r\n      </label>\r\n    </CheckBox>\r\n  );\r\n};\r\n\r\nCheckBox.propTypes = {\r\n  id: PropTypes.string,\r\n  label: PropTypes.string,\r\n  legend: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\nexport default React.memo(Checkbox);\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport produce from 'immer';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Contents, PageTitle, FlextCont } from '../../components/common';\r\nimport Checkbox from '../../components/form/checkbox/Checkbox';\r\nimport Loading from '../../components/loading/Loading';\r\nimport Button from '../../components/form/button/Button';\r\nimport Modal from '../../components/modal/Modal';\r\nimport { MdClose } from 'react-icons/md';\r\nimport { commas } from '../../libs/util';\r\nimport { types, cups } from '../../store/options';\r\nimport {\r\n  updateWishList,\r\n  checkedWish,\r\n  removeWish,\r\n  WISH_LIST,\r\n  REMOVE_WISH,\r\n} from '../../store/wish';\r\nimport { addOrderList, ADD_ORDER_LIST } from '../../store/order';\r\nimport { emptyLoading } from '../../store/loadings';\r\n\r\nconst WishWrap = styled.div`\r\n  padding-bottom: 220px;\r\n  .allChk {\r\n    width: 100%;\r\n    padding-bottom: 10px;\r\n    border-bottom: 1px solid #260f07;\r\n  }\r\n  .payBox {\r\n    position: fixed;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 20px;\r\n    background-color: #260f07;\r\n    z-index: 5;\r\n    .inn {\r\n      padding: 20px 10px;\r\n      background-color: #fff;\r\n      border-radius: 5px;\r\n      .sumBox {\r\n        margin-bottom: 20px;\r\n        padding: 0 10px 10px;\r\n        border-bottom: 1px solid #260f07;\r\n        font-size: 18px;\r\n        .sum {\r\n          color: #8c6046;\r\n          float: right;\r\n        }\r\n      }\r\n      .store {\r\n        text-align: center;\r\n        line-height: 1.5;\r\n        font-size: 14px;\r\n        a {\r\n          display: inline-block;\r\n          padding: 3px 5px;\r\n          margin: -5px 0 0 10px;\r\n          font-size: 14px;\r\n          vertical-align: middle;\r\n          border-radius: 3px;\r\n          background-color: #d9b391;\r\n          line-height: 1;\r\n        }\r\n      }\r\n      button {\r\n        margin-top: 20px;\r\n      }\r\n    }\r\n  }\r\n  .list {\r\n    > li {\r\n      position: relative;\r\n      padding: 15px;\r\n      &:nth-child(even) {\r\n        background-color: #ededed;\r\n      }\r\n      fieldset {\r\n        margin-bottom: 10px;\r\n      }\r\n      .options {\r\n        padding-left: 25px;\r\n        li {\r\n          margin: 10px 0;\r\n          font-size: 14px;\r\n          color: #8c6046;\r\n          .option {\r\n            float: left;\r\n          }\r\n          .extra {\r\n            float: right;\r\n          }\r\n        }\r\n      }\r\n      .total {\r\n        margin-top: 20px;\r\n        text-align: right;\r\n        color: #260f07;\r\n      }\r\n      .removeBtn {\r\n        position: absolute;\r\n        top: 10px;\r\n        right: 10px;\r\n        color: #260f07;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EmptyBox = styled.div`\r\n  padding: 40px;\r\n  color: #666;\r\n  text-align: center;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst Wish = ({\r\n  wish,\r\n  auth,\r\n  selected,\r\n  loadingWish,\r\n  addOrderList,\r\n  updateWishList,\r\n  checkedWish,\r\n  removeWish,\r\n  loadingRemoveWish,\r\n  loadingAddOrder,\r\n  emptyLoading,\r\n}) => {\r\n  const [total, setTotal] = useState(0);\r\n  const [count, setCount] = useState(0);\r\n  const [allCheck, setAllCheck] = useState(true);\r\n  const [modalMsg, setModalMsg] = useState('');\r\n  const [alertModal, setAlertModal] = useState(true);\r\n  const [removeModal, setRemoveModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let s = 0, //음료합계\r\n      c = 0; //음료수\r\n    if (wish) {\r\n      Object.keys(wish).forEach(w => {\r\n        if (wish[w].checked === true) {\r\n          s += wish[w].total;\r\n          c += 1;\r\n        }\r\n      });\r\n\r\n      //일일항목 전체선택 여부\r\n      setAllCheck(Object.keys(wish).every(e => wish[e].checked === true));\r\n    }\r\n    setTotal(s);\r\n    setCount(c);\r\n  }, [wish]);\r\n\r\n  useEffect(() => {\r\n    if (loadingAddOrder === false) {\r\n      setAlertModal(false);\r\n      setRemoveModal(false);\r\n      setModalMsg('주문 완료했습니다.');\r\n      Object.keys(wish).forEach(w => {\r\n        if (wish[w].checked === true) {\r\n          removeWish({\r\n            token: auth.idToken,\r\n            userId: auth.localId,\r\n            id: w,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [loadingAddOrder]);\r\n\r\n  useEffect(() => {\r\n    if (removeModal && loadingRemoveWish === false) {\r\n      setAlertModal(false);\r\n      setModalMsg('삭제되었습니다.');\r\n    }\r\n  }, [loadingRemoveWish, removeModal]);\r\n\r\n  //로딩상태 언마운트시 비움처리\r\n  useEffect(() => {\r\n    return () => {\r\n      emptyLoading(WISH_LIST);\r\n      emptyLoading(REMOVE_WISH);\r\n      emptyLoading(ADD_ORDER_LIST);\r\n    };\r\n  }, []);\r\n\r\n  //전체 선택 토글\r\n  const onClickCheckHandler = useCallback(() => {\r\n    updateWishList({\r\n      token: auth.idToken,\r\n      userId: auth.localId,\r\n      wish: produce(wish, draft => {\r\n        Object.keys(draft).forEach(w => {\r\n          draft[w].checked = !allCheck;\r\n        });\r\n      }),\r\n    });\r\n    setAllCheck(!allCheck);\r\n  }, [wish, allCheck]);\r\n\r\n  //결제할 항목 토글\r\n  const onCheckHandler = useCallback((id, checked) => {\r\n    checkedWish({\r\n      token: auth.idToken,\r\n      userId: auth.localId,\r\n      id,\r\n      wish: produce(wish[id], draft => {\r\n        draft.checked = !checked;\r\n      }),\r\n    });\r\n  }, []);\r\n\r\n  //항목삭제\r\n  const onRemoveHandler = useCallback(id => {\r\n    removeWish({\r\n      token: auth.idToken,\r\n      userId: auth.localId,\r\n      id,\r\n    });\r\n    setRemoveModal(true);\r\n  }, []);\r\n\r\n  //주문 추가\r\n  const onAddOrderHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!selected) {\r\n        setAlertModal(false);\r\n        setModalMsg('주문하실 매장을 선택해주세요.');\r\n      } else {\r\n        if (wish) {\r\n          const firstMenu = wish[Object.keys(wish)[0]];\r\n          addOrderList({\r\n            token: auth.idToken,\r\n            userId: auth.localId,\r\n            order: {\r\n              contents:\r\n                (firstMenu.nickname !== ''\r\n                  ? firstMenu.nickname\r\n                  : firstMenu.ko) + (count > 1 ? ` 외 ${count - 1}잔` : ' 1잔'),\r\n              total: total,\r\n              store: selected,\r\n              date: new Date().getTime(),\r\n            },\r\n          });\r\n        }\r\n      }\r\n    },\r\n    [wish, selected, total, count],\r\n  );\r\n\r\n  const onClickAlertHandler = useCallback(() => {\r\n    setModalMsg('');\r\n    setAlertModal(!alertModal);\r\n  }, [alertModal]);\r\n\r\n  return (\r\n    <Contents>\r\n      <PageTitle>위시 리스트</PageTitle>\r\n      <WishWrap>\r\n        {wish ? (\r\n          <form onSubmit={onAddOrderHandler}>\r\n            <Checkbox\r\n              id=\"allCheck\"\r\n              label=\"전체음료\"\r\n              legend=\"위시리스트에 모든음료 주문선택\"\r\n              onClick={onClickCheckHandler}\r\n              checked={allCheck}\r\n              className=\"allChk\"\r\n            />\r\n            {/* 모든 통신시 로딩바 노출 */}\r\n            {(loadingWish || loadingRemoveWish || loadingAddOrder) && (\r\n              <Loading />\r\n            )}\r\n\r\n            {/* 기타 알럿노출 */}\r\n            <Modal shown={alertModal} onClickHandler={onClickAlertHandler}>\r\n              {modalMsg}\r\n              <br />\r\n              <Button kind=\"default\" onClick={onClickAlertHandler}>\r\n                확인\r\n              </Button>\r\n            </Modal>\r\n            <ol className=\"list\">\r\n              {Object.keys(wish).map(w => {\r\n                return (\r\n                  <li key={w}>\r\n                    <Checkbox\r\n                      id={w}\r\n                      label={\r\n                        wish[w].nickname !== '' ? wish[w].nickname : wish[w].ko\r\n                      }\r\n                      legend={`${wish[w].ko} 선택하기`}\r\n                      checked={wish[w].checked}\r\n                      style={{ background: wish[w].checked ? 'red' : '' }}\r\n                      onClick={() => onCheckHandler(w, wish[w].checked)}\r\n                    />\r\n                    <ul className=\"options\">\r\n                      <li className=\"clear\">\r\n                        <span className=\"option\">\r\n                          {types[wish[w].type]}/{wish[w].size}/\r\n                          {cups[wish[w].cup]}\r\n                        </span>\r\n                        <span className=\"extra\">{commas(wish[w].price)}원</span>\r\n                      </li>\r\n                      {wish[w].shot.count > 0 && (\r\n                        <li className=\"clear\">\r\n                          <span className=\"option\">에스프레소</span>\r\n                          <span className=\"extra\">\r\n                            {commas(wish[w].shot.count * wish[w].shot.extra)}원\r\n                          </span>\r\n                        </li>\r\n                      )}\r\n                      {wish[w].syrup.mocha.count > 0 && (\r\n                        <li className=\"clear\">\r\n                          <span className=\"option\">모카 시럽</span>\r\n                          <span className=\"extra\">\r\n                            {commas(\r\n                              wish[w].syrup.mocha.count *\r\n                                wish[w].syrup.mocha.extra,\r\n                            )}\r\n                            원\r\n                          </span>\r\n                        </li>\r\n                      )}\r\n                      {wish[w].syrup.hazelnut.count > 0 && (\r\n                        <li className=\"clear\">\r\n                          <span className=\"option\">헤이즐넛 시럽</span>\r\n                          <span className=\"extra\">\r\n                            {commas(\r\n                              wish[w].syrup.hazelnut.count *\r\n                                wish[w].syrup.hazelnut.extra,\r\n                            )}\r\n                            원\r\n                          </span>\r\n                        </li>\r\n                      )}\r\n                      {wish[w].syrup.caramel.count > 0 && (\r\n                        <li className=\"clear\">\r\n                          <span className=\"option\">카라멜 시럽</span>\r\n                          <span className=\"extra\">\r\n                            {commas(\r\n                              wish[w].syrup.caramel.count *\r\n                                wish[w].syrup.caramel.extra,\r\n                            )}\r\n                            원\r\n                          </span>\r\n                        </li>\r\n                      )}\r\n                      {wish[w].syrup.vanilla.count > 0 && (\r\n                        <li className=\"clear\">\r\n                          <span className=\"option\">바닐라 시럽</span>\r\n                          <span className=\"extra\">\r\n                            {commas(\r\n                              wish[w].syrup.vanilla.count *\r\n                                wish[w].syrup.vanilla.extra,\r\n                            )}\r\n                            원\r\n                          </span>\r\n                        </li>\r\n                      )}\r\n                      {Object.keys(wish[w].messages).map(\r\n                        i =>\r\n                          wish[w].messages[i] !== '' &&\r\n                          'cup shot size mocha hazelnut caramel vanilla'.indexOf(\r\n                            i,\r\n                          ) < 0 && (\r\n                            <li key={i} className=\"clear\">\r\n                              <span className=\"option\">\r\n                                {wish[w].messages[i]}\r\n                              </span>\r\n                              <span className=\"extra\">0원</span>\r\n                            </li>\r\n                          ),\r\n                      )}\r\n                    </ul>\r\n                    <p className=\"total\">{commas(wish[w].total)}원</p>\r\n                    <Button\r\n                      kind=\"blank\"\r\n                      className=\"removeBtn\"\r\n                      onClick={() => onRemoveHandler(w)}\r\n                    >\r\n                      <MdClose />\r\n                    </Button>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ol>\r\n            <div className=\"payBox\">\r\n              <div className=\"inn\">\r\n                <p className=\"sumBox\">\r\n                  총 {count}개<span className=\"sum\">{commas(total)}원</span>\r\n                </p>\r\n                <p className=\"store\">\r\n                  {selected ? (\r\n                    <>\r\n                      <strong>[{selected.name}]</strong> {selected.address}\r\n                    </>\r\n                  ) : (\r\n                    '주문할 매장을 선택해 주세요.'\r\n                  )}\r\n                  <Link to=\"/store\">설정</Link>\r\n                </p>\r\n                <FlextCont>\r\n                  <Button kind=\"base\" type=\"submit\">\r\n                    주문하기\r\n                  </Button>\r\n                </FlextCont>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        ) : (\r\n          <EmptyBox>주문하실 음료가 없습니다.</EmptyBox>\r\n        )}\r\n      </WishWrap>\r\n    </Contents>\r\n  );\r\n};\r\n\r\nWish.propTypes = {\r\n  wish: PropTypes.object,\r\n  auth: PropTypes.object.isRequired,\r\n  selected: PropTypes.object,\r\n  addOrderList: PropTypes.func.isRequired,\r\n  updateWishList: PropTypes.func.isRequired,\r\n  checkedWish: PropTypes.func.isRequired,\r\n  removeWish: PropTypes.func.isRequired,\r\n  emptyLoading: PropTypes.func.isRequired,\r\n  loadingWish: PropTypes.bool,\r\n  loadingRemoveWish: PropTypes.bool,\r\n  loadingAddOrder: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = ({ wish, auth, store, loadings }) => ({\r\n  wish,\r\n  auth,\r\n  loadingWish: loadings[WISH_LIST],\r\n  loadingRemoveWish: loadings[REMOVE_WISH],\r\n  loadingAddOrder: loadings[ADD_ORDER_LIST],\r\n  selected: store.selected,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateWishList,\r\n  checkedWish,\r\n  removeWish,\r\n  addOrderList,\r\n  emptyLoading,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Wish);\r\n"],"sourceRoot":""}