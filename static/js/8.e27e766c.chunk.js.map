{"version":3,"sources":["components/form/input/Input.js","container/myPage/Store.js"],"names":["InputBox","styled","fieldset","React","memo","type","id","name","value","label","placeholder","changed","className","hidden","errormessage","htmlFor","onChange","aria-errormessage","StoreWrap","div","EmptyBox","mapDispatchToprops","initStore","setStore","connect","store","loadingStore","loadings","GET_STORES","history","useState","result","setResult","useEffect","stores","Object","keys","map","s","emptyLoading","onChangeStoreHandler","useCallback","e","target","filter","r","address","indexOf","trim","onClickStoreHandler","index","go","storeList","length","key","kind","onClick"],"mappings":"0aAOA,IAAMA,E,MAAWC,EAAOC,SAAV,KAwDCC,QAAMC,KA1CP,SAAC,GAWR,IAVLC,EAUI,EAVJA,KACAC,EASI,EATJA,GACAC,EAQI,EARJA,KACAC,EAOI,EAPJA,MACAC,EAMI,EANJA,MACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,OACAC,EACI,EADJA,aAEA,OACE,kBAACd,EAAD,CAAUY,UAAU,SAClB,2BAAOG,QAAST,EAAIM,UAAWC,EAAS,SAAW,MAChDJ,GAEH,2BACEJ,KAAMA,GAAc,OACpBC,GAAIA,EACJC,KAAMA,EACNG,YAAaA,EACbM,SAAUL,EACVH,MAAOA,EACPI,UAAWA,EACXK,oBAAmBH,GAA8B,W,8sCC/BzD,IAAMI,EAAYjB,IAAOkB,IAAV,KAiDTC,EAAWnB,IAAOkB,IAAV,KA2GRE,EAAqB,CAAEC,cAAWC,cAEzBC,sBAPS,SAAC,GAAD,MAA0B,CAChDC,MADsB,EAAGA,MAEzBC,aAFsB,EAAUC,SAETC,OAOvBP,EAFaG,CAtGD,SAAC,GAA2D,IAAzDK,EAAwD,EAAxDA,QAASJ,EAA+C,EAA/CA,MAAOH,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,SAAUG,EAAmB,EAAnBA,aAAmB,EAC3CI,mBAAS,IADkC,mBAChEC,EADgE,KACxDC,EADwD,KAGvEC,oBAAU,WACRX,KACC,CAACA,IAGJW,oBAAU,WACJR,EAAMS,QACRF,EAAUG,OAAOC,KAAKX,EAAMS,QAAQG,IAAI,SAAAC,GAAC,OAAIb,EAAMS,OAAOI,OAE3D,CAACb,EAAMS,SAGVD,oBAAU,WACR,OAAO,kBAAMM,YAAaX,OACzB,IAGH,IAAMY,EAAuBC,sBAC3B,SAAAC,GAAM,IACIlC,EAAUkC,EAAEC,OAAZnC,MACRwB,EACEG,OAAOC,KAAKX,EAAMS,QACfG,IAAI,SAAAC,GAAC,OAAIb,EAAMS,OAAOI,KACtBM,OAAO,SAAAC,GACN,OAAOA,EAAEC,QAAQC,QAAQvC,EAAMwC,SAAW,GACxCH,EAAEtC,KAAKwC,QAAQvC,EAAMwC,SAAW,EAC9BH,EACA,SAIZ,CAACpB,EAAMS,SAIHe,EAAsBR,sBAC1B,SAAAS,GACErB,EAAQsB,IAAI,GACZ5B,EAASQ,EAAOmB,KAElB,CAACrB,EAASE,EAAQR,IAGhB6B,EAAY,kBAAChC,EAAD,8EAuBhB,OAtBIW,EAAOsB,OAAS,IAClBD,EAAYrB,EAAOM,IAAI,SAACC,EAAGY,GACzB,OACE,wBAAII,IAAKJ,GACP,kBAAC,IAAD,CACEK,KAAK,QACL3C,UAAU,QACV4C,QAAS,kBAAMP,EAAoBC,KAEnC,0BAAMtC,UAAU,aACd,kBAAC,IAAD,OAEF,0BAAMA,UAAU,aACd,gCAAS0B,EAAE/B,MACX,iCAAU+B,EAAEQ,eAStB,kBAAC,IAAD,KACE,kBAAC,IAAD,iCACA,kBAAC5B,EAAD,KACE,kBAAC,IAAD,CACEb,KAAK,OACLC,GAAG,YACHG,MAAM,2BACNI,QAAM,EACNF,QAAS6B,EACT9B,YAAY,0CAEbgB,GAAgB,kBAAC,IAAD,MACjB,wBAAId,UAAU,QAAQwC","file":"static/js/8.e27e766c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst InputBox = styled.fieldset`\r\n  input {\r\n    border-radius: 3px;\r\n    border: 1px solid #999;\r\n    box-sizing: border-box;\r\n  }\r\n  &.success {\r\n    background-color: #2dc97a;\r\n  }\r\n  &.error {\r\n    background-color: #dd6868;\r\n  }\r\n`;\r\n\r\nconst Input = ({\r\n  type,\r\n  id,\r\n  name,\r\n  value,\r\n  label,\r\n  placeholder,\r\n  changed,\r\n  className,\r\n  hidden,\r\n  errormessage,\r\n}) => {\r\n  return (\r\n    <InputBox className=\"clear\">\r\n      <label htmlFor={id} className={hidden ? 'hidden' : null}>\r\n        {label}\r\n      </label>\r\n      <input\r\n        type={type ? type : 'text'}\r\n        id={id}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        onChange={changed}\r\n        value={value}\r\n        className={className}\r\n        aria-errormessage={errormessage ? errormessage : null}\r\n      />\r\n    </InputBox>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  value: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  changed: PropTypes.func,\r\n  className: PropTypes.string,\r\n  hidden: PropTypes.bool,\r\n};\r\n\r\nexport default React.memo(Input);\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Contents, PageTitle } from '../../components/common';\r\nimport { MdHome } from 'react-icons/md';\r\nimport Button from '../../components/form/button/Button';\r\nimport Input from '../../components/form/input/Input';\r\nimport Loading from '../../components/loading/Loading';\r\nimport { initStore, setStore, GET_STORES } from '../../store/store';\r\nimport { emptyLoading } from '../../store/loadings';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst StoreWrap = styled.div`\r\n  fieldset {\r\n    margin-bottom: 20px;\r\n\r\n    input {\r\n      width: 100%;\r\n      padding: 10px;\r\n      line-height: 1;\r\n    }\r\n  }\r\n  .list {\r\n    li {\r\n      padding: 10px;\r\n      &:nth-child(odd) {\r\n        background-color: #ededed;\r\n      }\r\n    }\r\n\r\n    button {\r\n      display: block;\r\n      width: 100%;\r\n      text-align: left;\r\n      .storeIcon {\r\n        float: left;\r\n        width: 60px;\r\n        height: 60px;\r\n        padding: 15px;\r\n        color: #fff;\r\n        background-color: #999;\r\n        font-size: 30px;\r\n      }\r\n      .storeInfo {\r\n        display: block;\r\n        overflow: hidden;\r\n        padding: 0 0 0 10px;\r\n        line-height: 1.5;\r\n        strong {\r\n          font-size: 16px;\r\n        }\r\n        address {\r\n          font-style: normal;\r\n          font-size: 14px;\r\n          line-height: 1.3;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EmptyBox = styled.div`\r\n  padding: 40px;\r\n  color: #666;\r\n  text-align: center;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst Store = ({ history, store, initStore, setStore, loadingStore }) => {\r\n  const [result, setResult] = useState([]);\r\n  //지점 Data가져오기\r\n  useEffect(() => {\r\n    initStore();\r\n  }, [initStore]);\r\n\r\n  //지점정보를 초기에 Array타입으로 세팅\r\n  useEffect(() => {\r\n    if (store.stores) {\r\n      setResult(Object.keys(store.stores).map(s => store.stores[s]));\r\n    }\r\n  }, [store.stores]);\r\n\r\n  //언마운트시 로딩상태 비움\r\n  useEffect(() => {\r\n    return () => emptyLoading(GET_STORES);\r\n  }, []);\r\n\r\n  //검색필드에 따른 지점정보 재설정\r\n  const onChangeStoreHandler = useCallback(\r\n    e => {\r\n      const { value } = e.target;\r\n      setResult(\r\n        Object.keys(store.stores)\r\n          .map(s => store.stores[s])\r\n          .filter(r => {\r\n            return r.address.indexOf(value.trim()) > -1 ||\r\n              r.name.indexOf(value.trim()) > -1\r\n              ? r\r\n              : null;\r\n          }),\r\n      );\r\n    },\r\n    [store.stores],\r\n  );\r\n\r\n  //매장선택\r\n  const onClickStoreHandler = useCallback(\r\n    index => {\r\n      history.go(-1);\r\n      setStore(result[index]);\r\n    },\r\n    [history, result, setStore],\r\n  );\r\n\r\n  let storeList = <EmptyBox>찾으시는 매장이 없습니다.</EmptyBox>;\r\n  if (result.length > 0) {\r\n    storeList = result.map((s, index) => {\r\n      return (\r\n        <li key={index}>\r\n          <Button\r\n            kind=\"blank\"\r\n            className=\"clear\"\r\n            onClick={() => onClickStoreHandler(index)}\r\n          >\r\n            <span className=\"storeIcon\">\r\n              <MdHome />\r\n            </span>\r\n            <span className=\"storeInfo\">\r\n              <strong>{s.name}</strong>\r\n              <address>{s.address}</address>\r\n            </span>\r\n          </Button>\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Contents>\r\n      <PageTitle>매장검색</PageTitle>\r\n      <StoreWrap>\r\n        <Input\r\n          type=\"text\"\r\n          id=\"findStore\"\r\n          label=\"매장검색\"\r\n          hidden\r\n          changed={onChangeStoreHandler}\r\n          placeholder=\"검색 해보세요\"\r\n        />\r\n        {loadingStore && <Loading />}\r\n        <ul className=\"list\">{storeList}</ul>\r\n      </StoreWrap>\r\n    </Contents>\r\n  );\r\n};\r\n\r\nStore.propTypes = {\r\n  store: PropTypes.object.isRequired,\r\n  initStore: PropTypes.func.isRequired,\r\n  setStore: PropTypes.func.isRequired,\r\n  loadingStore: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = ({ store, loadings }) => ({\r\n  store: store,\r\n  loadingStore: loadings[GET_STORES],\r\n});\r\n\r\nconst mapDispatchToprops = { initStore, setStore };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToprops,\r\n)(Store);\r\n"],"sourceRoot":""}