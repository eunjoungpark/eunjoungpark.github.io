{"version":3,"sources":["components/form/input/Input.js","components/auth/Auth.js","container/member/SignIn.js"],"names":["InputBox","styled","fieldset","React","memo","type","id","name","value","label","placeholder","changed","className","hidden","errormessage","htmlFor","onChange","aria-errormessage","Form","form","AuthModal","div","ValidationMsg","p","MESSAGE","INVALID_PASSWORD","EMAIL_NOT_FOUND","EMAIL_EXISTS","TOO_MANY_ATTEMPTS_TRY_LATER","mapDispatchToProps","initAuth","emptyMessage","connect","auth","loadings","error","loadingAuth","SET_AUTH","withRouter","history","location","useState","email","valid","touched","password","formValidation","setFormValidation","onChangeHandlerEmail","useCallback","e","target","produce","draft","checkEmail","onChangeHandlerPasswd","checkPassword","onSubmitHandlerAccount","preventDefault","onClickErrorHandler","onSubmit","onClickHandler","message","kind","onClick","role","aria-live","aria-invalid","SignIn","style","maxWidth","margin","textAlign"],"mappings":"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","file":"static/js/6.b60a7722.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst InputBox = styled.fieldset`\r\n  input {\r\n    border-radius: 3px;\r\n    border: 1px solid #999;\r\n    box-sizing: border-box;\r\n  }\r\n  &.success {\r\n    background-color: #2dc97a;\r\n  }\r\n  &.error {\r\n    background-color: #dd6868;\r\n  }\r\n`;\r\n\r\nconst Input = ({\r\n  type,\r\n  id,\r\n  name,\r\n  value,\r\n  label,\r\n  placeholder,\r\n  changed,\r\n  className,\r\n  hidden,\r\n  errormessage,\r\n}) => {\r\n  return (\r\n    <InputBox className=\"clear\">\r\n      <label htmlFor={id} className={hidden ? 'hidden' : null}>\r\n        {label}\r\n      </label>\r\n      <input\r\n        type={type ? type : 'text'}\r\n        id={id}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        onChange={changed}\r\n        value={value}\r\n        className={className}\r\n        aria-errormessage={errormessage ? errormessage : null}\r\n      />\r\n    </InputBox>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  value: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  changed: PropTypes.func,\r\n  className: PropTypes.string,\r\n  hidden: PropTypes.bool,\r\n};\r\n\r\nexport default React.memo(Input);\r\n","import React, { useState, useCallback } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport produce from 'immer';\r\nimport Modal from '../modal/Modal';\r\nimport Input from '../form/input/Input';\r\nimport Button from '../form/button/Button';\r\nimport { checkEmail, checkPassword } from '../../libs/util';\r\nimport { initAuth, SET_AUTH } from '../../store/auth';\r\nimport { emptyMessage } from '../../store/error';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n  label,\r\n  input {\r\n    font-size: 16px;\r\n    color: #333;\r\n  }\r\n  fieldset {\r\n    margin: 10px 0;\r\n  }\r\n  label {\r\n    float: left;\r\n    width: 30%;\r\n    line-height: 40px;\r\n  }\r\n  input {\r\n    width: 70%;\r\n    height: 40px;\r\n    padding: 10px;\r\n    overflow: hidden;\r\n  }\r\n  button {\r\n    margin-top: 25px;\r\n    padding-top: 7px;\r\n    padding-bottom: 7px;\r\n  }\r\n`;\r\n\r\nconst AuthModal = styled.div`\r\n  text-align: center;\r\n  &.error {\r\n    color: #f00;\r\n  }\r\n`;\r\n\r\nconst ValidationMsg = styled.p`\r\n  width: 70%;\r\n  margin-left: 30%;\r\n  padding: 5px;\r\n  color: #fff;\r\n  &.error {\r\n    color: #dd6868;\r\n  }\r\n  &.success {\r\n    color: #69d36e;\r\n  }\r\n`;\r\n\r\n/*\r\n  에러메시지\r\n*/\r\nconst MESSAGE = {\r\n  INVALID_PASSWORD: '비밀번호를 다시 확인 해주세요.',\r\n  EMAIL_NOT_FOUND: '이메일 주소를 다시 확인 해주세요.',\r\n  EMAIL_EXISTS: '이미 사용중인 이메일 주소입니다.',\r\n  TOO_MANY_ATTEMPTS_TRY_LATER:\r\n    '로그인 시도가 자주 발생했습니다. 30초 후, 다시 시도해주세요.',\r\n};\r\n\r\nconst Auth = ({\r\n  initAuth,\r\n  emptyMessage,\r\n  type,\r\n  auth,\r\n  error,\r\n  history,\r\n  location,\r\n}) => {\r\n  //이메일, 비밀번호 유효성 상태\r\n  const [formValidation, setFormValidation] = useState({\r\n    email: {\r\n      value: '',\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      value: '',\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n\r\n  //이메일 유효성 검사\r\n  const onChangeHandlerEmail = useCallback(e => {\r\n    const { value } = e.target;\r\n    setFormValidation(\r\n      produce(draft => {\r\n        draft.email.value = value;\r\n        draft.email.valid = checkEmail(value);\r\n        draft.email.touched = true;\r\n      }),\r\n    );\r\n  }, []);\r\n\r\n  //비밀번호 유효성 검사\r\n  const onChangeHandlerPasswd = useCallback(e => {\r\n    const { value } = e.target;\r\n    setFormValidation(\r\n      produce(draft => {\r\n        draft.password.value = value;\r\n        draft.password.valid = checkPassword(value);\r\n        draft.password.touched = true;\r\n      }),\r\n    );\r\n  }, []);\r\n\r\n  //회원가입 or 로그인 실행\r\n  const onSubmitHandlerAccount = useCallback(\r\n    e => {\r\n      if (formValidation.email.valid && formValidation.password.valid) {\r\n        initAuth({\r\n          email: formValidation.email.value,\r\n          password: formValidation.password.value,\r\n          type,\r\n        });\r\n      }\r\n      e.preventDefault();\r\n    },\r\n    [formValidation, type, initAuth],\r\n  );\r\n\r\n  //에러메시지 모달 닫음\r\n  const onClickErrorHandler = useCallback(() => {\r\n    emptyMessage(SET_AUTH);\r\n  }, [emptyMessage]);\r\n\r\n  return (\r\n    <Form onSubmit={onSubmitHandlerAccount}>\r\n      {error && (\r\n        <Modal onClickHandler={onClickErrorHandler}>\r\n          <AuthModal className=\"error\">\r\n            {MESSAGE[error.message]\r\n              ? MESSAGE[error.message]\r\n              : MESSAGE['TOO_MANY_ATTEMPTS_TRY_LATER']}\r\n          </AuthModal>\r\n          <Button kind=\"default\" onClick={onClickErrorHandler}>\r\n            확인\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n\r\n      <Input\r\n        id=\"email\"\r\n        type=\"email\"\r\n        name=\"email\"\r\n        label=\"아이디\"\r\n        value={formValidation.email.value}\r\n        placeholder=\"이메일 주소를 입력해주세요\"\r\n        changed={onChangeHandlerEmail}\r\n        errormessage=\"errorId\"\r\n      />\r\n      {formValidation.email.touched && (\r\n        <ValidationMsg\r\n          className={formValidation.email.valid ? 'success' : 'error'}\r\n          id=\"errorId\"\r\n          role=\"alert\"\r\n          aria-live=\"assertive\"\r\n          aria-invalid={!formValidation.email.valid}\r\n        >\r\n          {formValidation.email.valid\r\n            ? '유효한 이메일양식입니다.'\r\n            : '잘못된 이메일 양식입니다.'}\r\n        </ValidationMsg>\r\n      )}\r\n      <Input\r\n        id=\"password\"\r\n        type=\"password\"\r\n        name=\"email\"\r\n        label=\"비밀번호\"\r\n        value={formValidation.password.value}\r\n        placeholder=\"비밀번호를 입력해주세요\"\r\n        changed={onChangeHandlerPasswd}\r\n        errormessage=\"errorPasswd\"\r\n      />\r\n      {formValidation.password.touched && (\r\n        <ValidationMsg\r\n          id=\"errorPasswd\"\r\n          role=\"alert\"\r\n          aria-live=\"assertive\"\r\n          aria-invalid={!formValidation.password.valid}\r\n          className={formValidation.password.valid ? 'success' : 'error'}\r\n        >\r\n          {formValidation.password.valid\r\n            ? '유효한 형식의 비밀번호입니다.'\r\n            : '6자 이상의 문자(소문자, 특수문자, 숫자)를 입력해주세요'}\r\n        </ValidationMsg>\r\n      )}\r\n      <Button type=\"submit\" kind=\"base\">\r\n        확인\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nAuth.propTypes = {\r\n  auth: PropTypes.object,\r\n  error: PropTypes.object,\r\n  initAuth: PropTypes.func.isRequired,\r\n  emptyMessage: PropTypes.func.isRequired,\r\n  type: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = ({ auth, loadings, error }) => ({\r\n  auth,\r\n  loadingAuth: loadings[SET_AUTH],\r\n  error: error[SET_AUTH],\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  initAuth,\r\n  emptyMessage,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(withRouter(Auth));\r\n","import React from 'react';\r\nimport { Contents, PageTitle } from '../../components/common';\r\nimport Auth from '../../components/auth/Auth';\r\n\r\nconst SignIn = () => {\r\n  return (\r\n    <Contents>\r\n      <PageTitle>로그인</PageTitle>\r\n      <div\r\n        style={{\r\n          maxWidth: '500px',\r\n          margin: '0 auto 20px auto',\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        테스트계정을 사용하셔도 됩니다.\r\n        <br />\r\n        (test@test.com / 111111)\r\n      </div>\r\n      <Auth type=\"signin\" />\r\n    </Contents>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n"],"sourceRoot":""}