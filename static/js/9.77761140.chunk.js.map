{"version":3,"sources":["components/form/itemGroup/ItemCount.js","container/myPage/MyMenuPay.js"],"names":["ItemCountStyle","styled","fieldset","React","memo","children","hidden","count","onDecrease","onIncrease","ariaLabel","name","className","type","value","kind","onClick","aria-hidden","aria-label","ItemBase","div","OptionBox","PayBox","mapDispatchToProps","setMenuCount","addOrderList","emptyLoading","connect","auth","mymenu","store","loadings","menu","selected","loadingAddOrder","ADD_ORDER_LIST","history","useState","modalMsg","setModalMsg","alertModal","setAlertModal","useEffect","localId","push","total","useMemo","onHandlerDecreaseCount","useCallback","cnt","onHandlerIncreaseCount","onAddOrderHandler","token","idToken","userId","order","contents","nickname","ko","date","Date","getTime","onClickCompleteHandler","onClickAlertHandler","memberMenuPay","src","image","width","alt","commas","types","size","cups","cup","Object","keys","messages","map","option","indexOf","address","to","onClickHandler","shown"],"mappings":"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","file":"static/js/9.77761140.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Button from '../button/Button';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst ItemCountStyle = styled.fieldset`\r\n  margin: 10px 5px;\r\n  .label {\r\n    float: left;\r\n    vertical-align: middle;\r\n    font-size: 14px;\r\n    line-height: 30px;\r\n  }\r\n  .count {\r\n    float: right;\r\n  }\r\n  .quantity {\r\n    display: inline-block;\r\n    padding: 0 10px;\r\n  }\r\n`;\r\n\r\n/*\r\n  갯수 설정\r\n*/\r\nconst ItemCount = ({\r\n  children,\r\n  hidden,\r\n  count,\r\n  onDecrease,\r\n  onIncrease,\r\n  ariaLabel,\r\n  name,\r\n}) => {\r\n  return (\r\n    <ItemCountStyle>\r\n      <legend className={hidden ? 'hidden' : 'label'}>{children}</legend>\r\n      <input type=\"hidden\" name={name} value={count} />\r\n      <div className=\"count\">\r\n        <Button kind=\"default\" onClick={onDecrease} ariaLabel=\"1만큼 수량감소\">\r\n          <span aria-hidden=\"true\">-</span>\r\n        </Button>\r\n        <span className=\"quantity\" aria-label={ariaLabel ? ariaLabel : null}>\r\n          {count}\r\n        </span>\r\n        <Button kind=\"default\" onClick={onIncrease} ariaLabel=\"1만큼 수량증가\">\r\n          <span aria-hidden=\"true\">+</span>\r\n        </Button>\r\n      </div>\r\n    </ItemCountStyle>\r\n  );\r\n};\r\n\r\nItemCount.propTypes = {\r\n  children: PropTypes.string,\r\n  hidden: PropTypes.string,\r\n  count: PropTypes.number,\r\n  name: PropTypes.string,\r\n  onDecrease: PropTypes.func,\r\n  onIncrease: PropTypes.func,\r\n};\r\nexport default React.memo(ItemCount);\r\n","import React, { useState, useCallback, useMemo, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { commas } from '../../libs/util';\r\nimport Button from '../../components/form/button/Button';\r\nimport Modal from '../../components/modal/Modal';\r\nimport Loading from '../../components/loading/Loading';\r\nimport { Contents, PageTitle, FlextCont } from '../../components/common';\r\nimport ItemCount from '../../components/form/itemGroup/ItemCount';\r\nimport { types, cups } from '../../store/options';\r\nimport { setMenuCount } from '../../store/mymenu';\r\nimport { addOrderList, ADD_ORDER_LIST } from '../../store/order';\r\nimport { emptyLoading } from '../../store/loadings';\r\n\r\n/*\r\n  STYLE\r\n*/\r\nconst ItemBase = styled.div`\r\n  margin: 0 5px;\r\n  .itemImg {\r\n    float: left;\r\n    width: 170px;\r\n    text-align: center;\r\n    img {\r\n      width: 150px;\r\n    }\r\n  }\r\n  .itemInfo {\r\n    margin-bottom: 20px;\r\n    overflow: hidden;\r\n  }\r\n  p.ko {\r\n    color: #333;\r\n    line-height: 1.5;\r\n  }\r\n  p.price {\r\n    font-size: 18px;\r\n    color: #8c6046;\r\n  }\r\n`;\r\n\r\nconst OptionBox = styled.div`\r\n  background-color: #f2efeb;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n\r\n  ul {\r\n    background-color: #fff;\r\n    padding: 15px;\r\n    border-radius: 5px;\r\n    li {\r\n      line-height: 1.5;\r\n      font-size: 14px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PayBox = styled.div`\r\n  padding:25px 0;\r\n  margin-top:25px;\r\n  border-top:1px dashed #cdcdcd;\r\n    .store {\r\n      text-align: center;\r\n      line-height:1.5;\r\n      font-size:14px;\r\n      a {\r\n        display: inline-block;\r\n          padding: 5px;\r\n          margin: -4px 0 0 5px;\r\n          font-size: 14px;\r\n          vertical-align: middle;\r\n          border-radius: 3px;\r\n          background-color: #d9b391;\r\n          line-height:1;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n//음료주문 최대값\r\nconst MAX = 20;\r\nconst MyMenuPay = ({\r\n  auth,\r\n  menu,\r\n  selected,\r\n  setMenuCount,\r\n  addOrderList,\r\n  loadingAddOrder,\r\n  emptyLoading,\r\n  history,\r\n}) => {\r\n  const [modalMsg, setModalMsg] = useState(''); //알림 메시지\r\n  const [alertModal, setAlertModal] = useState(true); //알림 노출여부\r\n  //계정없을 경우 메인이동\r\n  useEffect(() => {\r\n    if (auth.localId === null) {\r\n      history.push('/');\r\n    }\r\n  }, [auth.localId, history]);\r\n\r\n  //언마운트시 로딩상태 비움\r\n  useEffect(() => {\r\n    return () => emptyLoading(ADD_ORDER_LIST);\r\n  }, [emptyLoading]);\r\n\r\n  //합계 계산\r\n  const total = useMemo(() => {\r\n    if (menu) {\r\n      return menu.total * menu.count;\r\n    }\r\n  }, [menu]);\r\n\r\n  //음료수 감소\r\n  const onHandlerDecreaseCount = useCallback(\r\n    cnt => {\r\n      if (cnt - 1 < 1) {\r\n        setAlertModal(false);\r\n        setModalMsg('최소 수량은 1잔 이상입니다.');\r\n        return;\r\n      }\r\n      setMenuCount(cnt - 1);\r\n    },\r\n    [setMenuCount],\r\n  );\r\n\r\n  // 음료수 증가\r\n  const onHandlerIncreaseCount = useCallback(\r\n    cnt => {\r\n      if (cnt + 1 > MAX) {\r\n        setAlertModal(false);\r\n        setModalMsg('최대 주문가능 수량은 20잔 입니다.');\r\n        return;\r\n      }\r\n      setMenuCount(cnt + 1);\r\n    },\r\n    [setMenuCount],\r\n  );\r\n\r\n  //주문 추가\r\n  const onAddOrderHandler = useCallback(() => {\r\n    if (!selected) {\r\n      setAlertModal(false);\r\n      setModalMsg('주문하실 매장을 선택해주세요.');\r\n    } else {\r\n      if (menu) {\r\n        addOrderList({\r\n          token: auth.idToken,\r\n          userId: auth.localId,\r\n          order: {\r\n            contents:\r\n              (menu.nickname !== '' ? menu.nickname : menu.ko) +\r\n              (menu.count > 1 ? ` 외 ${menu.count - 1}잔` : ' 1잔'),\r\n            total,\r\n            store: selected,\r\n            date: new Date().getTime(),\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }, [auth.idToken, auth.localId, total, menu, selected, addOrderList]);\r\n\r\n  //주문완료시, 목록이동\r\n  const onClickCompleteHandler = useCallback(() => {\r\n    history.push('/');\r\n  }, [history]);\r\n\r\n  //모달가림\r\n  const onClickAlertHandler = useCallback(() => {\r\n    setModalMsg('');\r\n    setAlertModal(!alertModal);\r\n  }, [alertModal]);\r\n\r\n  let memberMenuPay = null;\r\n  if (menu) {\r\n    memberMenuPay = (\r\n      <>\r\n        <ItemBase className=\"clear\">\r\n          <div className=\"itemImg\">\r\n            <img\r\n              src={menu.image}\r\n              width=\"150\"\r\n              alt={menu.nickname !== '' ? menu.nickname : menu.ko}\r\n            />\r\n          </div>\r\n          <div className=\"itemInfo\">\r\n            <p className=\"ko\">\r\n              {menu.nickname !== '' ? menu.nickname : menu.ko}\r\n            </p>\r\n            <p className=\"price\">{commas(total)}</p>\r\n          </div>\r\n          <ItemCount\r\n            count={menu.count}\r\n            ariaLabel=\"음료 수량\"\r\n            onDecrease={() => onHandlerDecreaseCount(menu.count)}\r\n            onIncrease={() => onHandlerIncreaseCount(menu.count)}\r\n          >\r\n            주문수량\r\n          </ItemCount>\r\n        </ItemBase>\r\n        <OptionBox>\r\n          <ul>\r\n            <li>\r\n              {types[menu.type]}/{menu.size}/{cups[menu.cup]}\r\n            </li>\r\n            <li>\r\n              {Object.keys(menu.messages).map(option => {\r\n                return menu.messages[option] !== '' &&\r\n                  'cup size'.indexOf(option) < 0\r\n                  ? menu.messages[option] + '/'\r\n                  : null;\r\n              })}\r\n            </li>\r\n          </ul>\r\n        </OptionBox>\r\n        <PayBox>\r\n          <p className=\"store\">\r\n            {selected ? (\r\n              <>\r\n                <strong>[{selected.name}]</strong> {selected.address}\r\n              </>\r\n            ) : (\r\n              '주문할 매장을 선택해 주세요.'\r\n            )}\r\n            <Link to=\"/store\">설정</Link>\r\n          </p>\r\n          <FlextCont>\r\n            <Button kind=\"base\" onClick={onAddOrderHandler}>\r\n              주문하기\r\n            </Button>\r\n          </FlextCont>\r\n        </PayBox>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Contents>\r\n      <PageTitle>\r\n        나만의 음료 <span className=\"hidden\">주문</span>\r\n      </PageTitle>\r\n      {loadingAddOrder && <Loading />}\r\n      {loadingAddOrder === false && (\r\n        <Modal onClickHandler={onClickCompleteHandler}>\r\n          주문이 완료되었습니다.\r\n          <br />\r\n          <Button kind=\"default\" onClick={onClickCompleteHandler}>\r\n            확인\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      {memberMenuPay}\r\n      <Modal shown={alertModal} onClickHandler={onClickAlertHandler}>\r\n        {modalMsg}\r\n        <br />\r\n        <Button kind=\"default\" onClick={onClickAlertHandler}>\r\n          확인\r\n        </Button>\r\n      </Modal>\r\n    </Contents>\r\n  );\r\n};\r\n\r\nMyMenuPay.propTypes = {\r\n  auth: PropTypes.object,\r\n  menu: PropTypes.object,\r\n  selected: PropTypes.object,\r\n  setMenuCount: PropTypes.func,\r\n  addOrderList: PropTypes.func,\r\n  emptyLoading: PropTypes.func,\r\n  loadingAddOrder: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = ({ auth, mymenu, store, loadings }) => ({\r\n  auth,\r\n  menu: mymenu.menu,\r\n  selected: store.selected,\r\n  loadingAddOrder: loadings[ADD_ORDER_LIST],\r\n});\r\n\r\nconst mapDispatchToProps = { setMenuCount, addOrderList, emptyLoading };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(MyMenuPay);\r\n"],"sourceRoot":""}