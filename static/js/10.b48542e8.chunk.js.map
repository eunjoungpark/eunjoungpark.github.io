{"version":3,"sources":["container/myPage/MyMenu.js"],"names":["MyMenuWrap","styled","div","EmptyBox","mapDispatchToProps","removeMenu","setMenu","emptyLoading","connect","auth","mymenu","loadings","menuList","lists","loadingMenu","MY_MENU","loadingRemoveMenu","REMOVE_MY_MENU","history","useState","modalMsg","setModalMsg","alertModal","setAlertModal","useEffect","localId","push","onRemoveMenuHandler","useCallback","id","token","idToken","userId","onSelectMenuHandler","onClickAlertHandler","shown","onClickHandler","kind","onClick","className","Object","keys","map","m","key","width","src","image","alt","nickname","ko","en"],"mappings":"2mDAiBA,IAAMA,EAAaC,IAAOC,IAAV,KA0DVC,EAAWF,IAAOC,IAAV,KAqIRE,EAAqB,CAAEC,eAAYC,YAASC,kBAEnCC,sBATS,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,SAAjB,MAAiC,CACvDF,OACAG,SAAUF,EAAOG,MACjBC,YAAaH,EAASI,KACtBC,kBAAmBL,EAASM,OAO5Bb,EAFaI,CAjIA,SAAC,GAST,IARLC,EAQI,EARJA,KACAG,EAOI,EAPJA,SACAE,EAMI,EANJA,YACAE,EAKI,EALJA,kBACAT,EAII,EAJJA,aACAF,EAGI,EAHJA,WACAC,EAEI,EAFJA,QACAY,EACI,EADJA,QACI,EAC4BC,mBAAS,IADrC,mBACGC,EADH,KACaC,EADb,OAEgCF,oBAAS,GAFzC,mBAEGG,EAFH,KAEeC,EAFf,KAGJC,oBAAU,WACa,OAAjBf,EAAKgB,SACPP,EAAQQ,KAAK,MAEd,CAACjB,EAAKgB,UAETD,oBAAU,WACR,OAAO,WACLjB,EAAaQ,KACbR,EAAaU,OAEd,IAEHO,oBAAU,YACkB,IAAtBR,IACFO,GAAc,GACdF,EAAY,iDAEb,CAACL,IAEJ,IAAMW,EAAsBC,sBAAY,SAAAC,GACtCxB,EAAW,CACTyB,MAAOrB,EAAKsB,QACZC,OAAQvB,EAAKgB,QACbI,QAED,IAEGI,EAAsBL,sBAAY,SAAAC,GACtCvB,EAAQuB,GACRX,EAAQQ,KAAK,gBACZ,IAEGQ,EAAsBN,sBAAY,WACtCP,EAAY,IACZE,GAAeD,IACd,CAACA,IAEJ,OACE,qCACIR,GAAeE,IAAsB,kBAAC,IAAD,MAEvC,kBAAC,IAAD,CAAOmB,MAAOb,EAAYc,eAAgBF,GACvCd,EACD,6BACA,kBAAC,IAAD,CAAQiB,KAAK,UAAUC,QAASJ,GAAhC,iBAIF,kBAAC,IAAD,KACE,kBAAC,IAAD,uCACQ,0BAAMK,UAAU,UAAhB,iBAER,kBAACvC,EAAD,KACGY,EACC,wBAAI2B,UAAU,QACXC,OAAOC,KAAK7B,GAAU8B,IAAI,SAAAC,GAAC,OAC1B,wBAAIC,IAAKD,EAAGJ,UAAU,SACpB,uBAAGA,UAAU,WACX,yBACEM,MAAM,MACNC,IAAK,CAAClC,EAAS+B,GAAGI,OAClBC,IAC2B,KAAzBpC,EAAS+B,GAAGM,SACRrC,EAAS+B,GAAGM,SACZrC,EAAS+B,GAAGO,MAItB,yBAAKX,UAAU,YACb,kBAAC,IAAD,CAAQF,KAAK,QAAQC,QAAS,kBAAML,EAAoBU,KACtD,0BAAMJ,UAAU,MACY,KAAzB3B,EAAS+B,GAAGM,SACTrC,EAAS+B,GAAGM,SACZrC,EAAS+B,GAAGO,IAElB,0BAAMX,UAAU,MAAM3B,EAAS+B,GAAGQ,KAEpC,kBAAC,IAAD,CACEd,KAAK,QACLE,UAAU,YACVD,QAAS,kBAAMX,EAAoBgB,KAEnC,kBAAC,IAAD,YAOV,kBAACxC,EAAD","file":"static/js/10.b48542e8.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { MdClose } from 'react-icons/md';\r\nimport Loading from '../../components/loading/Loading';\r\nimport Modal from '../../components/modal/Modal';\r\nimport Button from '../../components/form/button/Button';\r\nimport { Contents, PageTitle } from '../../components/common';\r\nimport { emptyLoading } from '../../store/loadings';\r\nimport {\r\n  removeMenu,\r\n  setMenu,\r\n  MY_MENU,\r\n  REMOVE_MY_MENU,\r\n} from '../../store/mymenu';\r\n\r\nconst MyMenuWrap = styled.div`\r\n  .list {\r\n    li {\r\n      padding: 10px 15px;\r\n      &:nth-child(odd) {\r\n        background-color: #ededed;\r\n      }\r\n      .menuImg {\r\n        float: left;\r\n        width: 70px;\r\n        overflow: hidden;\r\n        border-radius: 35px;\r\n        img {\r\n          display: block;\r\n          margin: 0 50%;\r\n          transform: translate(-50%, 0);\r\n        }\r\n      }\r\n      .menuInfo {\r\n        position: relative;\r\n        overflow: hidden;\r\n        padding: 0 30px 0 20px;\r\n        button {\r\n          width: 100%;\r\n          padding: 10px 0;\r\n        }\r\n\r\n        span {\r\n          display: flex;\r\n          line-height: 1.5;\r\n\r\n          &.ko {\r\n            font-weight: bold;\r\n          }\r\n          &.en {\r\n            color: #8c6046;\r\n          }\r\n        }\r\n        .removeBtn {\r\n          position: absolute;\r\n          top: 50%;\r\n          right: 0;\r\n          width: 24px;\r\n          height: 24px;\r\n          padding: 1px 0 0 1px;\r\n          border-radius: 13px;\r\n          color: #8c6046;\r\n          border: 1px solid #8c6046;\r\n          font-size: 20px;\r\n          font-weight: bold;\r\n          text-align: center;\r\n          transform: translate(0, -50%);\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EmptyBox = styled.div`\r\n  padding: 40px;\r\n  color: #666;\r\n  text-align: center;\r\n`;\r\n\r\nconst MyMemu = ({\r\n  auth,\r\n  menuList,\r\n  loadingMenu,\r\n  loadingRemoveMenu,\r\n  emptyLoading,\r\n  removeMenu,\r\n  setMenu,\r\n  history,\r\n}) => {\r\n  const [modalMsg, setModalMsg] = useState('');\r\n  const [alertModal, setAlertModal] = useState(true);\r\n  useEffect(() => {\r\n    if (auth.localId === null) {\r\n      history.push('/');\r\n    }\r\n  }, [auth.localId]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      emptyLoading(MY_MENU);\r\n      emptyLoading(REMOVE_MY_MENU);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loadingRemoveMenu === false) {\r\n      setAlertModal(false);\r\n      setModalMsg('삭제 되었습니다');\r\n    }\r\n  }, [loadingRemoveMenu]);\r\n\r\n  const onRemoveMenuHandler = useCallback(id => {\r\n    removeMenu({\r\n      token: auth.idToken,\r\n      userId: auth.localId,\r\n      id,\r\n    });\r\n  }, []);\r\n\r\n  const onSelectMenuHandler = useCallback(id => {\r\n    setMenu(id);\r\n    history.push('/mymenu/pay');\r\n  }, []);\r\n\r\n  const onClickAlertHandler = useCallback(() => {\r\n    setModalMsg('');\r\n    setAlertModal(!alertModal);\r\n  }, [alertModal]);\r\n\r\n  return (\r\n    <>\r\n      {(loadingMenu || loadingRemoveMenu) && <Loading />}\r\n\r\n      <Modal shown={alertModal} onClickHandler={onClickAlertHandler}>\r\n        {modalMsg}\r\n        <br />\r\n        <Button kind=\"default\" onClick={onClickAlertHandler}>\r\n          확인\r\n        </Button>\r\n      </Modal>\r\n      <Contents>\r\n        <PageTitle>\r\n          나만의 메뉴<span className=\"hidden\">목록</span>\r\n        </PageTitle>\r\n        <MyMenuWrap>\r\n          {menuList ? (\r\n            <ul className=\"list\">\r\n              {Object.keys(menuList).map(m => (\r\n                <li key={m} className=\"clear\">\r\n                  <p className=\"menuImg\">\r\n                    <img\r\n                      width=\"100\"\r\n                      src={[menuList[m].image]}\r\n                      alt={\r\n                        menuList[m].nickname !== ''\r\n                          ? menuList[m].nickname\r\n                          : menuList[m].ko\r\n                      }\r\n                    />\r\n                  </p>\r\n                  <div className=\"menuInfo\">\r\n                    <Button kind=\"blank\" onClick={() => onSelectMenuHandler(m)}>\r\n                      <span className=\"ko\">\r\n                        {menuList[m].nickname !== ''\r\n                          ? menuList[m].nickname\r\n                          : menuList[m].ko}\r\n                      </span>\r\n                      <span className=\"en\">{menuList[m].en}</span>\r\n                    </Button>\r\n                    <Button\r\n                      kind=\"blank\"\r\n                      className=\"removeBtn\"\r\n                      onClick={() => onRemoveMenuHandler(m)}\r\n                    >\r\n                      <MdClose />\r\n                    </Button>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <EmptyBox>나만의 음료를 저장해보세요!</EmptyBox>\r\n          )}\r\n        </MyMenuWrap>\r\n      </Contents>\r\n    </>\r\n  );\r\n};\r\n\r\nMyMemu.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n  menuList: PropTypes.object,\r\n  emptyLoading: PropTypes.func.isRequired,\r\n  removeMenu: PropTypes.func.isRequired,\r\n  setMenu: PropTypes.func.isRequired,\r\n  loadingRemoveMenu: PropTypes.bool,\r\n  loadingMenu: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = ({ auth, mymenu, loadings }) => ({\r\n  auth,\r\n  menuList: mymenu.lists,\r\n  loadingMenu: loadings[MY_MENU],\r\n  loadingRemoveMenu: loadings[REMOVE_MY_MENU],\r\n});\r\n\r\nconst mapDispatchToProps = { removeMenu, setMenu, emptyLoading };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(MyMemu);\r\n"],"sourceRoot":""}