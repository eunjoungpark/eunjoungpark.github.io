{"version":3,"sources":["container/myPage/Orders.js"],"names":["OrderWrap","styled","div","EmptyBox","mapDispatchToProps","initOrderList","emptyOrderList","connect","auth","order","loadings","orderList","lists","page","endAt","finish","loadingOrder","ORDER_LIST","history","useState","isScroll","setIsScroll","useEffect","localId","token","idToken","userId","limit","push","onScroll","useCallback","innerHeight","window","scrollHeight","document","body","documentElement","scrollTop","addEventListener","emptyLoading","removeEventListener","width","scope","length","colSpan","map","o","index","date","Date","key","className","contents","commas","total","store","name","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds"],"mappings":"2+BAUA,IAAMA,EAAYC,IAAOC,IAAV,KA+BTC,EAAWF,IAAOC,IAAV,KAuIRE,EAAqB,CAAEC,kBAAeC,oBAE7BC,sBAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAhB,MAAgC,CACtDF,OACAG,UAAWF,EAAMG,MACjBC,KAAMJ,EAAMK,MACZC,OAAQN,EAAMM,OACdC,aAAcN,EAASO,OAOvBb,EAFaG,CAlIA,SAAC,GAST,IARLC,EAQI,EARJA,KACAG,EAOI,EAPJA,UACAE,EAMI,EANJA,KACAE,EAKI,EALJA,OACAV,EAII,EAJJA,cACAC,EAGI,EAHJA,eACAU,EAEI,EAFJA,aACAE,EACI,EADJA,QACI,EAC4BC,oBAAS,GADrC,mBACGC,EADH,KACaC,EADb,KAEJC,oBAAU,WACJd,EAAKe,QACPlB,EAAc,CACZmB,MAAOhB,EAAKiB,QACZC,OAAQlB,EAAKe,QACbV,OACAc,MAAO,KAGTT,EAAQU,KAAK,MAEd,IAEH,IAAMC,EAAWC,sBAAY,WAAO,IAC1BC,EAAgBC,OAAhBD,YACAE,GAAiBC,SAASC,MAAQD,SAASE,iBAA3CH,aACFI,EACJH,SAASC,KAAKE,WAAaH,SAASE,gBAAgBC,UAEpDhB,EADEY,EAAeF,EAAcM,EAAY,KAK5C,IAsBH,OApBAf,oBAAU,WAER,OADAU,OAAOM,iBAAiB,SAAUT,GAAU,GACrC,WACLU,YAAatB,KACbX,IACA0B,OAAOQ,oBAAoB,SAAUX,GAAU,KAEhD,IAEHP,oBAAU,WACJT,IAASE,GACXV,EAAc,CACZmB,MAAOhB,EAAKiB,QACZC,OAAQlB,EAAKe,QACbV,OACAc,MApDM,MAuDT,CAACP,IAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,kCACCJ,GAAgB,kBAAC,IAAD,MACjB,kBAAChB,EAAD,KACE,+BACE,kCACE,yBAAKyC,MAAM,QACX,yBAAKA,MAAM,QACX,yBAAKA,MAAM,QACX,yBAAKA,MAAM,SAEb,+BACE,4BACE,wBAAIC,MAAM,OAAV,OACA,wBAAIA,MAAM,OAAV,6BACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,kBAGJ,+BACG/B,EAAUgC,QAAU,EACnB,4BACE,wBAAIC,QAAQ,KACV,kBAACzC,EAAD,mEAIJQ,EAAUkC,IAAI,SAACC,EAAGC,GAChB,IAAMC,EAAO,IAAIC,KAAKH,EAAEE,MACxB,OACE,wBAAIE,IAAKH,GACP,wBAAII,UAAU,OAAOJ,EAAQ,GAC7B,4BACE,uBAAGI,UAAU,QAAQL,EAAEM,UACvB,uBAAGD,UAAU,SACX,yDADF,IAC2BE,YAAOP,EAAEQ,OADpC,WAIF,4BAAKR,EAAES,MAAMC,MACb,wBAAIL,UAAU,QAAd,UACMH,EAAKS,cADX,YAC4BT,EAAKU,WAC7B,EAFJ,YAESV,EAAKW,WAAa,IACzB,6BAHF,UAIMX,EAAKY,WAJX,cAI2BZ,EAAKa,aAJhC,cAIkDb,EAAKc","file":"static/js/11.0c4d61be.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { commas } from '../../libs/util';\r\nimport { Contents, PageTitle } from '../../components/common';\r\nimport Loading from '../../components/loading/Loading';\r\nimport { initOrderList, emptyOrderList, ORDER_LIST } from '../../store/order';\r\nimport { emptyLoading } from '../../store/loadings';\r\n\r\nconst OrderWrap = styled.div`\r\n  table {\r\n    width: 100%;\r\n    border: 1px solid #cdcdcd;\r\n    thead {\r\n      th {\r\n        height: 30px;\r\n        background-color: #333;\r\n        color: #fff;\r\n        font-size: 14px;\r\n      }\r\n    }\r\n    tbody {\r\n      & > tr:nth-child(even) {\r\n        background-color: #ededed;\r\n      }\r\n      td {\r\n        height: 60px;\r\n        line-height: 1.3;\r\n        font-size: 14px;\r\n        text-align: center;\r\n        .info {\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EmptyBox = styled.div`\r\n  padding: 40px;\r\n  color: #666;\r\n  text-align: center;\r\n  font-size: 16px;\r\n`;\r\nconst LIMIT = 11;\r\nconst Orders = ({\r\n  auth,\r\n  orderList,\r\n  page,\r\n  finish,\r\n  initOrderList,\r\n  emptyOrderList,\r\n  loadingOrder,\r\n  history,\r\n}) => {\r\n  const [isScroll, setIsScroll] = useState(false);\r\n  useEffect(() => {\r\n    if (auth.localId) {\r\n      initOrderList({\r\n        token: auth.idToken,\r\n        userId: auth.localId,\r\n        page,\r\n        limit: 10,\r\n      });\r\n    } else {\r\n      history.push('/');\r\n    }\r\n  }, []);\r\n\r\n  const onScroll = useCallback(() => {\r\n    const { innerHeight } = window;\r\n    const { scrollHeight } = document.body || document.documentElement;\r\n    const scrollTop =\r\n      document.body.scrollTop || document.documentElement.scrollTop;\r\n    if (scrollHeight - innerHeight - scrollTop < 10) {\r\n      setIsScroll(true);\r\n    } else {\r\n      setIsScroll(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onScroll, false);\r\n    return () => {\r\n      emptyLoading(ORDER_LIST);\r\n      emptyOrderList();\r\n      window.removeEventListener('scroll', onScroll, false);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (page && !finish) {\r\n      initOrderList({\r\n        token: auth.idToken,\r\n        userId: auth.localId,\r\n        page,\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n  }, [isScroll]);\r\n\r\n  return (\r\n    <Contents>\r\n      <PageTitle>주문 내역</PageTitle>\r\n      {loadingOrder && <Loading />}\r\n      <OrderWrap>\r\n        <table>\r\n          <colgroup>\r\n            <col width=\"10%\" />\r\n            <col width=\"35%\" />\r\n            <col width=\"30%\" />\r\n            <col width=\"25%\" />\r\n          </colgroup>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">NO.</th>\r\n              <th scope=\"col\">주문 내용</th>\r\n              <th scope=\"col\">지점</th>\r\n              <th scope=\"col\">날짜</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {orderList.length <= 0 ? (\r\n              <tr>\r\n                <td colSpan=\"4\">\r\n                  <EmptyBox>주문내역이 없습니다.</EmptyBox>\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              orderList.map((o, index) => {\r\n                const date = new Date(o.date);\r\n                return (\r\n                  <tr key={index}>\r\n                    <td className=\"num\">{index + 1}</td>\r\n                    <td>\r\n                      <p className=\"info\">{o.contents}</p>\r\n                      <p className=\"total\">\r\n                        <strong>결제액 : </strong> {commas(o.total)}원\r\n                      </p>\r\n                    </td>\r\n                    <td>{o.store.name}</td>\r\n                    <td className=\"date\">\r\n                      {`${date.getFullYear()}.${date.getMonth() +\r\n                        1}.${date.getDate()}`}{' '}\r\n                      <br />\r\n                      {`${date.getHours()} : ${date.getMinutes()} : ${date.getSeconds()}`}\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </OrderWrap>\r\n    </Contents>\r\n  );\r\n};\r\n\r\nOrders.propTypes = {\r\n  order: PropTypes.object,\r\n  auth: PropTypes.object.isRequired,\r\n  initOrderList: PropTypes.func.isRequired,\r\n  loadingOrder: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = ({ auth, order, loadings }) => ({\r\n  auth,\r\n  orderList: order.lists,\r\n  page: order.endAt,\r\n  finish: order.finish,\r\n  loadingOrder: loadings[ORDER_LIST],\r\n});\r\n\r\nconst mapDispatchToProps = { initOrderList, emptyOrderList };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Orders);\r\n"],"sourceRoot":""}